dependencies:
- SDL1.2 - in any distro. be sure to install the sdl-dev, too! (usually called libsdl1.2-dev)
- gcc - check your distro
- g++ - check your distro
- glibc/math (should be present anyway)
- make (not totally necessary)
- 32bit x86 processor(i386), 64bit x86 processor (AMD_K64)
- X11-dev
- libXmu-dev (unless you add -D NOCLIPBOARD to the primary compiling line in the makefile)

how to install
type 

make lhendraw
sudo make install

if compiling worked, there should be a executable file called lhendraw.

build system - for advanced users

Steps of building:

1. in the /tools/ folder, the tools are generated pullout.c Relies on generated/pulloutmatic.hxx, which is generated by looking for .pullout.hxx files
2. in the /generated/ folder, there are some files which are automatically generated with the tools in /tools/,
* from files that end in .draft = for reflective data structures ; by tools/filestructure
* from .hxx files which contain macro lists only and are additionally directly included = to create defined numberings ; by tools/reflection_enums
* from files that end in .pullout.hxx = for menu's and their actions ; these units are directly included into the tool-program., as well as other menus.
* from all .hxx files which contain the string typedef struct, these definitions will be read and converted to lists which are indexed in a master list. The strings in them are used to create the datastructure tree the user can edit directly. ; by tools/option
It is the aim to have all global variables reflected.
The following files are automatically generated:
by pullout:
* pullout_structfile: File of menu structures
* pullout_stringfile: contains ONE string, containing all menu strings with char 0 in-between.
* pullout_reflectfile: contains structenum 's, allowing the program to get an overview over its menues.
by filestructure.c
* .*structure.hxx: struct's for all memory structures extracted from the .draft files (structure.hxx is the internal datastructure, anything else are file structures)
* multilistlistfile: contains an index of each multilist, to give the program an idea which multilists are available for what kind of »structure«
* propertylist.hxx: intended for properties-of-subitems in TELESCOPE buffers of the internal structure. lists all their properties with memory-offset and get-routine
* propertydirectory.hxx: an index to propertylist, listing all subitems themselves, each with an index and a length telling which subitems belong to it in propertylist.hxx
by others
* reflection.hxx: generated by multiple tools and gives some lists of internal data structures
* reflection_headers.hxx: a list of the lists of internal datstructures in reflection.hxx. Is included early to allow access from .hxx files which are reflected into reflection.hxx themselves.

3. Build system consists of .c or .cxx files, which pearl-necklace-type includes all components of the program with #include and contains some main function with entry point/main loop


when compiling fails:
look in the corresponding .c or .cxx file (usually lhendraw.cxx) if you could add/remove some include on the top.
This is because some distroes use different includes, and 

BUILDING ON XCODE
use the xcodeproj file.
compile the tools first by building in the following order:

filestructure
reflection
reflection_enums
option
pulloutmatic
pullout
generated
ilhendraw(first in list, takes some time)
bundle (creates the .app folder structure)

You MUST copy lhendraw.app into the /Applications/ Folder, because it's internal structure depends on it and I do not know how to use executable-relative paths on Mac OS X.

WINDOWS-VERSION:

This version requires still that the tools and generated files get generated on linux.
To compile, use ReactOS (0.4.3 was used) and RosBE (the self-carrying build environment of ReactOS). Execute make.bat in the working directory.
